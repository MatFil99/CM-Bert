import itertools

def get_singlerun_configuration(
        dataset,
        text_features,
        # audio_features,
        # visual_features,
        model_name,
        encoder_checkpoint,
        hidden_dropout_prob,
        modality_att_dropout_prob,
        freeze_params_layers,
        hidden_size,
        projection_size,
        batch_size,
        num_epochs,
        patience,
        criterion,
        optimizer,
        layer_specific_optimization,
        lr,
        scheduler_type,
        warmup_steps_ratio,
        best_model_metric,
        save_best_model,
        save_model_dest,
        wwm_probability=0.15,
        chunk_size=128,
        num_labels=2,
):
    config = (
        text_features,
        # audio_features,
        # visual_features,
        model_name,
        encoder_checkpoint,
        # load_pretrained,
        hidden_dropout_prob,
        modality_att_dropout_prob,
        # freeze_params,
        freeze_params_layers,
        hidden_size,
        projection_size,
        num_labels,
        batch_size,
        num_epochs,
        patience,
        chunk_size,
        wwm_probability,
        criterion,
        optimizer,
        layer_specific_optimization,
        lr,
        scheduler_type,
        warmup_steps_ratio,
        best_model_metric,
        save_best_model,
        save_model_dest
    )
    return config, dataset


def get_multirun_configuration(
        dataset,
        text_features,
        # audio_features,
        # visual_features,
        model_name,
        encoder_checkpoint,
        hidden_dropout_prob,
        modality_att_dropout_prob,
        freeze_params_layers,
        hidden_size,
        projection_size,
        batch_size,
        num_epochs,
        patience,
        criterion,
        optimizer,
        layer_specific_optimization,
        lr,
        scheduler_type,
        warmup_steps_ratio,
        best_model_metric,
        save_best_model,
        save_model_dest,
        wwm_probability=[0.15],
        chunk_size=[128],
        num_labels=[2],
):
    runs_configuration = set(itertools.product(*[
        text_features,
        # audio_features,
        # visual_features,
        model_name,
        encoder_checkpoint,
        # load_pretrained,
        hidden_dropout_prob,
        modality_att_dropout_prob,
        # freeze_params,
        freeze_params_layers,
        hidden_size,
        projection_size,
        num_labels,
        batch_size,
        num_epochs,
        patience,
        chunk_size,
        wwm_probability,
        criterion,
        optimizer,
        layer_specific_optimization,
        lr,
        scheduler_type,
        warmup_steps_ratio,
        best_model_metric,
        save_best_model,
        save_model_dest
    ]))

    return runs_configuration, dataset

